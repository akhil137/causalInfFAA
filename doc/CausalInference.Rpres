Causal Inference
========================================================
author: Akhil Shah
date: 

Counterfactual Estimation
========================================================
* Consider a situation that will likely require GDP
* Decision makers would like to quantify *what if* we don't apply a GDP
* Causal Inference methods can help estimate this counterfactual
* Use machine learning methods to generate these counterfactuals
* example: What happens to airborne delay if a GDP is not implemented?

Causal Inference in a nutshell
========================================================
* Unbiased counterfactual estimation requires eliminating confounders
* Eliminate counfounding through propensity scores - probability to recive treatment (GDP) based on covariates (weather,traffic)
* Estimation of propensity score (or log-odds of): Linear Logistic regression 

$$\frac{P(GDP=1|X)}{1-P(GDP=1|X)}=F(X) = \beta X$$

* GBM (using K trees) is often better (more flexible and robust) than linear logistic regression

$$F(X) = \sum^K\beta_k g_k(X)$$ 

Recall original motivation
========================================================
* Context: a situation (time window) where GDP is to be applied (e.g. inclimate weather)
* Decision making question: "What if we don't implement a GDP?" 
* Staticians call this estimation of "average treatment effect on the treated (ATT)": estimate the counterfactual of not applying a GDP
* What outcome do we want to analyze as a result of applying or not-applying GDP?
  * Airborn delay
  * Arrival Queue length
  
Data manipulation and alignment
=======================================================
* Analysis requires hourly TAF, ASPM (various modules), TFMI  
* ASPM has hourly values for average airborne delay
  * Queue length from TAER module of ASPM is 15-min based
  * Arrival Demand and Effective Arrivals (number of serviced aircraft)
* TAF is (nominally) generated for 0,6,12,18h 
* TFMI is event based 
  * GDP initations (root advisories) can be modified
  * Must follow the sub time-series to get actual start/stop times
  * End-result is 'status' of each hour (GDP or No-GDP)


GDP events: planned vs "backdated"
========================================================
```{r,echo=FALSE,eval=FALSE}
#from airborneDelay.r
setwd("~/NoBackup/code/nasa/src/causalInfFAA/data")
ap<-"JFK"
airport<-paste(ap,"/ZNY",sep="")

advy.path<-"~/NoBackup/code/nasa/data/advy_2010_2014"

filelist<-dir(advy.path,pattern="*.csv")
filepaths<-unlist(lapply(filelist,function(x){file.path(advy.path,x)}))

#below gdp.ewr is badly named!!! can be any ap defined above
#also need to source twangDataCreation.r or copy and paste getGDP func from it
source("~/NoBackup/code/nasa/src/causalInfFAA/getGDP.r")
gdp.ewr.list<-lapply(c(1:20),function(x){data.frame(getGDP(filepaths[x],airport))})
gdp.ewr<-do.call(rbind,gdp.ewr.list)

gdponly<-gdp.ewr[gdp.ewr$status=="GDP",]
save(gdponly,file="~/NoBackup/code/nasa/src/causalInfFAA/data/JFKGDPOnlyEvents")
```
- JFK 2010-2014: 496 GDP root advisories; 71 were 'backdated' 
- Large variance in time horizons for planned GDP, 
```{r,echo=FALSE,fig.height=3,fig.width=4,fig.align='center'}
load(file="~/NoBackup/code/nasa/src/causalInfFAA/data/JFKGDPOnlyEvents")
#lets select only root adv*
gdponlyroot<-gdponly[gdponly$rootAdv==1,]
gdponlyroot$backdated<-as.factor(gdponlyroot$startTime-gdponlyroot$sendTime<0)
#there were 71 backdated and 425 planned GDP events between 2010-2014
#some histogram plotting of how timely these events can be
library(ggplot2)
rootTimeliness<-ggplot(gdponlyroot,aes(as.numeric(startTime-sendTime)))
rootTimeliness + xlim(c(-100,500)) + geom_histogram(binwidth=10) + facet_grid(backdated ~ .) +  labs(title="Distribution of all GDP Root Advisories",x="Start-Send time in Minutes")
```

* whereas backdated GDP events usually start within 10 minutes prior to sending
```{r,echo=FALSE,fig.height=3,fig.width=4,fig.align='center'}
#zoom into backdated histogram
bd<-ggplot(gdponlyroot,aes(as.numeric(startTime-sendTime),backdated=TRUE))
bd + xlim(c(-40,0)) + geom_histogram(binwidth=1) + labs(title="Distribution of BackDated GDP Root Advisories",x="Start-Send time in Minutes")
```

Airborne Delay/Arrival Queue dynamics
========================================================
* What effect does a GDP have on these outcomes?
* Consider +/-5 hours centered on backdated GDP events
```{r,echo=FALSE,eval=FALSE}
gdp.backdated<-gdponlyroot[gdponlyroot$startTime-gdponlyroot$sendTime<0,]
#get rid of that bulky full text advisory
gdp.bd<-gdp.backdated[,-8]
#round to nearest hour then convert to nY time*
gdp.bd$startHour<-round(gdp.bd$startTime,"hour") 
#after formatting, the result is a character*
gdp.bd$NYstartHour<-format(as.POSIXct(gdp.bd$startHour),tz="America/New_York")
save(gdp.bd,file="~/NoBackup/code/nasa/src/causalInfFAA/data/JFKGDPBackDatedOnlyEvents")
```


```{r,echo=FALSE,eval=FALSE}
load("~/NoBackup/code/nasa/src/causalInfFAA/data/JFKGDPBackDatedOnlyEvents")
load("~/NoBackup/code/nasa/src/causalInfFAA/data/JFK_ASPMQueueLength_timestamped_data.Rdata")
#to extract aspm index compare correct tz*
#we're going to cycle thru each gdp.bd start hour in NY time zone
#and find the the aspm index which corresponds to it by matchgin the 
#aspm timestamp
load("~/NoBackup/code/nasa/src/causalInfFAA/data/JFK_ASPMAirborneDelay_timestamped_data.Rdata")
#fix the column name for air delay
colnames(aspm)<-c("timestamp","A","AirDelay")
aspm_time_idx<-unlist(lapply(seq(1, length(gdp.bd$NYstartHour)),function(x){
	which(aspm$timestamp==as.POSIXlt(gdp.bd$NYstartHour[x],tz="America/New_York"))}))
qlength_time_idx<-unlist(lapply(seq(1, length(gdp.bd$NYstartHour)),function(x){
	which(qdat.hourly$timestamp==as.POSIXlt(gdp.bd$NYstartHour[x],tz="America/New_York"))}))
#do pm 5 hours from start of backdated GDP
pm=5
airdelay<-lapply(seq(1:length(aspm_time_idx)), function(x){
	aspm[seq(aspm_time_idx[x]-pm,aspm_time_idx[x]+pm),]$AirDelay})

qlength<-lapply(seq(1:length(qlength_time_idx)), function(x){
	qdat.hourly[seq(qlength_time_idx[x]-pm,qlength_time_idx[x]+pm),]$qlength})
#now melt these for easy plotting: L1 is the event id (recall there are 71 backdated gdp events)
#the time variable ranges from -5 to +5, where time=0 is start of backdated gdp event
library(reshape)
ad<-melt.list(airdelay)
ad$time<-rep(seq(-pm,pm),length(airdelay))
#qlength data from Amy (in qdat.hourly) only goes until 8/31/2014 whereas
#aspm data goes until 12/31/2014.  Thus only 66 backdated events in ql
ql<-melt.list(qlength)
ql$time<-rep(seq(-pm,pm),length(qlength))
save(ad,file="~/NoBackup/code/nasa/src/causalInfFAA/data/AirDelayDynamicsPM5HoursAroundBackDatedGDP")
save(ql,file="~/NoBackup/code/nasa/src/causalInfFAA/data/QueueLengthDynamicsPM5HoursAroundBackDatedGDP")
```

```{r,echo=FALSE,fig.width=6,fig.height=5}
load("~/NoBackup/code/nasa/src/causalInfFAA/data/AirDelayDynamicsPM5HoursAroundBackDatedGDP")
load("~/NoBackup/code/nasa/src/causalInfFAA/data/QueueLengthDynamicsPM5HoursAroundBackDatedGDP")
library(ggplot2)

#plot the first 4 events for queue length and airborne delay dynamics
ggplot(ql[ql$L1<5,],aes(x=time,y=value,group=L1))+geom_smooth(alpha=0.01, size=.5,aes(colour=factor(L1))) + geom_point(aes(colour=factor(L1)))+labs(title="Dynamics of Arrival Queue Around a backdated GDP",x="Relative time [hours]",y="Number in Arrival Queue")
ggplot(ad[ad$L1<5,],aes(x=time,y=value,group=L1))+geom_smooth(alpha=0.01, size=.5,aes(colour=factor(L1))) + geom_point(aes(colour=factor(L1)))+labs(title="Dynamics of Airborne Delay Around a backdated GDP",x="Relative time [hours]",y="Airborne Delay [minutes]")

```
* Both have delayed (offset) decrease after initiation of GDP 
* Consider outcomes at multiple offsets from treatment (GDP) initiation



Data manipulation and alignment
=======================================================
* Analysis requires hourly TAF, ASPM (various modules), TFMI  
* ASPM has hourly values for average airborne delay
  * Queue length from TAER module of ASPM is 15-min based
  * Arrival Demand and Effective Arrivals (number of serviced aircraft)
* TAF is (nominally) generated for 0,6,12,18h 
* TFMI is event based 
  * GDP initations (root advisories) can be modified
  * Must follow the sub time-series to get actual start/stop times
  * End-result is 'status' of each hour (GDP or No-GDP)


Feature Relevance
=======================================================
```{r, echo=FALSE}
#do some feature relevance analysis with xgboost
library(xgboost)
load("~/NoBackup/code/nasa/src/causalInfFAA/data/JFK_twang_withASPMweather_noNA_timestamped_data.Rdata")
#FIRST include qlength as a feature
#get rid of timestamp; hours; AirDelay; status
xgbdat<-twang.complete[,c(-1,-9,-11,-13)] 
dtrain <- xgb.DMatrix(data = as.matrix(xgbdat),label=twang.complete$status)
#create the model
model <- xgboost(data = dtrain, nrounds = 20, objective = "binary:logistic")
```


Feature Relevance 2
=======================================================
```{r, echo=FALSE}
#generate importance matrix
imp_matrix <- xgb.importance(feature_names = colnames(xgbdat), model = model)
xgb.plot.importance(importance_matrix = imp_matrix)
```

Airborne delay as an outcome
=======================================================
```{r abdelay_hist, echo=FALSE,fig.height=3,fig.width=4,fig.align='center'}

#show histogram difference between qlength when gdp and not
abdelay_hist<-ggplot(twang.complete,aes(AirDelay_JFK)) + geom_histogram(binwidth=5) +facet_grid(status ~ .,scales = "free_y")
abdelay_hist+labs(title="Distriubtions of Airborne Delay based on GDP status")
```


Outcomes
=======================================================
```{r, echo=FALSE,fig.height=3,fig.width=4,fig.align='center'}

#show histogram difference between qlength when gdp and not
qlen_hist<-ggplot(twang.complete,aes(qlength)) + geom_histogram(binwidth=5) +facet_grid(status ~ .,scales = "free_y")
qlen_hist+labs(title="Distriubtions of Queue Length based on GDP status")

#show histogram difference between Num arrivals when gdp and not
ggplot(twang.complete,aes(A_JFK)) + geom_histogram(binwidth=1) +facet_grid(status ~ .,scales = "free_y") + labs(title="Distriubtions of Arrival count at JFK based on GDP status")
```

Only fraction of hourly arrivals have EDCT even under GDP
=======================================================
```{r, echo=FALSE,fig.height=3,fig.width=4,fig.align='center'}

load("JFK_twang_withEDCTandASPMweather_noNA_timestamped_data.Rdata")

ggplot(twang.edct,aes(Percent.EDCT)) + geom_histogram(binwidth=1) +facet_grid(status ~ .,scales = "free_y") + labs(title="Distriubtion of Fraction of Hourly Arrivals with EDCT at JFK based on GDP status")
```
But there are also 486/6519 hours with No-GDP status that still have arrivals with EDCT.
nrow(twang.edct[twang.edct$status==0 & twang.edct$Arrival.With.EDCT>0,])
summary(twang.edct[twang.edct$status==0 & twang.edct$Arrival.With.EDCT>0,]$Percent.EDCT)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1.96    5.88   16.06   24.48   40.87   83.33 

```{r, echo=FALSE,fig.height=3,fig.width=4,fig.align='center'}   
ggplot(twang.edct[twang.edct$Percent.EDCT>0,],aes(x=as.factor(status),y=Percent.EDCT)) + geom_boxplot()  
```

So we really do need to consider 'treatment' as continous.
What should the Treatment var be? Percent.EDCT or Avg.EDCT

How does hourly Airborne Delay vary with  hourly Average EDCT (avgd over all arrivals)?
=======================================================
```{r, echo=FALSE,fig.height=3,fig.width=4,fig.align='center'}
ggplot(twang.edct,aes(Avg.EDCT,AirDelay_JFK)) + geom_point()+ facet_grid(status ~ .,scales = "free_y") + labs(title="Hourly Air Delay vs. Hourly Avg EDCT of all Flights JFK based on GDP status")
```

Feature Relevance 2
=======================================================
```{r, echo=FALSE,fig.height=3,fig.width=4,fig.align='center'}
#NOW get rid of qlength and recalculate feature importance
xgbdat<-twang.complete[,c(-1,-9,-11,-12,-13)] 
dtrain <- xgb.DMatrix(data = as.matrix(xgbdat),label=twang.complete$status)
#create the model
model <- xgboost(data = dtrain, nrounds = 20, objective = "binary:logistic")
#generate importance matrix
imp_matrix <- xgb.importance(feature_names = colnames(xgbdat), model = model)
xgb.plot.importance(importance_matrix = imp_matrix)
```


Focusing on backdated GDP events
=======================================================
```{r,echo=FALSE,eval=FALSE}
load("~/code/causalInfFAA/data/JFK_GDPStatus_timestamped_data.Rdata")
load("~/code/causalInfFAA/data/JFK_GDPBackDated_timestamped_data")
#first check how many days (dates) are in common between forecasted and backdated
gdponlyroot<-gdponly[gdponly$rootAdv==1,]
gdponlyroot$backdated<-as.factor(gdponlyroot$startTime-gdponlyroot$sendTime<0)
gdp.forecasted<-gdponlyroot[gdponlyroot$backdated==FALSE,]
gdp.forecasted$startHour<-round(gdp.forecasted$startTime,"hour") 
gdp.forecasted$NYstartHour<-format(as.POSIXct(gdp.forecasted$startHour),tz="America/New_York")
gdp.dates.forecasted<-unique(as.Date(gdp.forecasted$NYstartHour))
gdp.dates.bd<-unique(as.Date(gdp.bd$NYstartHour))
#as shown below, only two dates: "2013-06-10" "2014-06-25"
as.Date(intersect(as.character(gdp.dates.bd),as.character(gdp.dates.forecasted)))
#we can then filter the twang.complete dataframe using backdated dates as key
#isolate no GDP events
twang.complete.noGDP<-twang.complete[twang.complete$status==0,]
#isolate all GDP events
twang.complete.GDP<-twang.complete[twang.complete$status==1,]
#of those, isolate backdated by date
twang.complete.GDP.date<-as.Date(twang.complete.GDP$timestamp)
#create a flag and apply it to GDP events
bd_flag<-sapply(twang.complete.GDP.date,function(x){is.element(x,gdp.dates.bd)})
twang.complete.GDP.bd<-twang.complete.GDP[bd_flag,]

twang.complete.GDP.forecasted<-twang.complete.GDP[!bd_flag,]
#there are 13 days with backdated events, 80 forecasted GDP, and 325 days of no GDP
num_days_forecasted<-length(unique(as.Date(twang.complete.GDP.forecasted$timestamp)))
num_days_bd<-length(unique(as.Date(twang.complete.GDP.bd$timestamp)))
num_days_noGDP<-length(unique(as.Date(twang.complete.noGDP$timestamp)))
#now create two datasets; backdated + no GDP and forecasted + no GDP (we already have total)
twang.complete.bd<-rbind(twang.complete.noGDP,twang.complete.GDP.bd)
twang.complete.forecasted<-rbind(twang.complete.noGDP,twang.complete.GDP.forecasted)
#note the breakdown of 'treatment' status in all three datasets and how the add up
table(twang.complete.bd$status) #6519 in control group (no GDP); 84 in treatment
table(twang.complete.forecasted$status)
table(twang.complete$status)
#save these as indiv datasets
```


Correlating forecasted vs observed weather
=======================================================



Covariate Balancing with PS for backdated 1
=======================================================
First don't use queue length as a covariate
```{r, echo=FALSE,eval=FALSE}
#load dataset for JFK: covs + outcome (air delay) + treatment status (status)
library(twang)
#load("JFK_twang_withASPMweather_noNA_timestamped_data.Rdata")
ps.model.noqueue<-ps(status ~ A_JFK + windspeed + visibility + crosswinds + vis_ASPM + windspseed_ASPM + ceil_ASPM + crosswind_ASPM,data=twang.complete.bd,estimand="ATT")
#show imbalance and balanced tables 
bal.jfk<-bal.table(ps.model.noqueue)
pretty.tab <- bal.jfk$unw[,c("tx.mn","ct.mn","ks.pval")]
names(pretty.tab) <- c("E(Y1|t=1)","E(Y0|t=0)","p-value")
pretty.tab.weighted <- bal.jfk$ks.mean.ATT[,c("tx.mn","ct.mn","ks.pval")]
names(pretty.tab.weighted) <- c("E(Y1|t=1)","E(Y0|t=1)","p-value","E(Y0|t=0)")
```
\begin{table}[ht]
\centering
\begin{tabular}{lrrr}
  \hline
 & E(Y1$|$t=1) & E(Y0$|$t=0) & p-value \\ 
  \hline
A\_JFK & 34.84 & 21.90 & -0.00 \\ 
  windspeed & 12.30 & 10.86 & 0.08 \\ 
  visibility & 7.16 & 9.27 & 0.00 \\ 
  crosswinds & 9.74 & 7.47 & 0.00 \\ 
  vis\_ASPM & 7.72 & 9.26 & 0.00 \\ 
  windspeed\_ASPM & 15.16 & 11.36 & 0.00 \\ 
  ceil\_ASPM & 228.01 & 481.68 & 0.00 \\ 
  crosswind\_ASPM & 8.64 & 6.96 & 0.00 \\ 
   \hline
\end{tabular}
\caption{Imbalance of the treatment and comparison groups for various weather and traffic (arrivals count) features (covariates)} 
\label{tab:imbalance}
\end{table}

% latex table generated in R 3.1.0 by xtable 1.7-4 package
% Fri May 13 14:47:54 2016
\begin{table}[ht]
\centering
\begin{tabular}{lrrrr}
  \hline
 & E(Y1$|$t=1) & E(Y0$|$t=1) & p-value & E(Y0$|$t=0) \\ 
  \hline
A\_JFK & 34.84 & 33.14 & 0.44 & 21.90 \\ 
  windspeed & 12.30 & 11.71 & 0.81 & 10.86 \\ 
  visibility & 7.16 & 8.09 & 0.04 & 9.27 \\ 
  crosswinds & 9.74 & 8.97 & 0.59 & 7.47 \\ 
  vis\_ASPM & 7.72 & 8.08 & 0.62 & 9.26 \\ 
  windspeed\_ASPM & 15.16 & 13.93 & 0.37 & 11.36 \\ 
  ceil\_ASPM & 228.01 & 309.61 & 0.11 & 481.68 \\ 
  crosswind\_ASPM & 8.64 & 8.65 & 0.92 & 6.96 \\ 
   \hline
\end{tabular}
\caption{Simulated counterfactual E(Y0|t=1) and assessment of balance achieved by propensity score weighting the treatment and comparison groups using IPTW} 
\label{tab:balance}
\end{table}


Covariate Balancing with PS for backdated 2
=======================================================
Now use queue length as a covariate
```{r,echo=FALSE,eval=FALSE}
#loads twang.complete.bd dataframe with backdated gdp events
load("~/code/causalInfFAA/data/JFK_backdatedGDPOnly_twang_withASPMweather_noNA_timestamped_data.Rdata")
ps.model.withqueue<-ps(status ~ qlength + A_JFK + windspeed + visibility + crosswinds + vis_ASPM + windspeed_ASPM + ceil_ASPM + crosswind_ASPM,data=twang.complete.bd,estimand="ATT")
#balance tables
bal.jfk.withqueue<-bal.table(ps.model.withqueue)
pretty.tab <- bal.jfk$unw[,c("tx.mn","ct.mn","ks.pval")]
names(pretty.tab) <- c("E(Y1|t=1)","E(Y0|t=0)","p-value")
xtable(pretty.tab,
caption = "Imbalance of the treatment and comparison groups for various weather and traffic (arrivals count) features (covariates)",
label = "tab:imbalance",
digits = c(0, 2, 2, 2),
align=c("l","r","r","r"))

pretty.tab <- bal.jfk$ks.mean.ATT[,c("tx.mn","ct.mn","ks.pval")]
pretty.tab <- cbind(pretty.tab, bal.jfk$unw[,"ct.mn"])
names(pretty.tab) <- c("E(Y1|t=1)","E(Y0|t=1)","p-value","E(Y0|t=0)")
xtable(pretty.tab,
caption = "Simulated counterfactual E(Y0|t=1) and assessment of balance achieved by propensity score weighting the treatment and comparison groups using IPTW",
label = "tab:balance",
digits = c(0, 2, 2, 2, 2),
align=c("l","r","r","r","r"))
```

% latex table generated in R 3.1.0 by xtable 1.7-4 package
% Fri May 13 15:02:28 2016
\begin{table}[ht]
\centering
\begin{tabular}{lrrr}
  \hline
 & E(Y1$|$t=1) & E(Y0$|$t=0) & p-value \\ 
  \hline
qlength & 53.62 & 2.31 & -0.00 \\ 
  A\_JFK & 34.84 & 21.90 & -0.00 \\ 
  windspeed & 12.30 & 10.86 & 0.08 \\ 
  visibility & 7.16 & 9.27 & 0.00 \\ 
  crosswinds & 9.74 & 7.47 & 0.00 \\ 
  vis\_ASPM & 7.72 & 9.26 & 0.00 \\ 
  windspeed\_ASPM & 15.16 & 11.36 & 0.00 \\ 
  ceil\_ASPM & 228.01 & 481.68 & 0.00 \\ 
  crosswind\_ASPM & 8.64 & 6.96 & 0.00 \\ 
   \hline
\end{tabular}
\caption{Imbalance of the treatment and comparison groups for various weather and traffic (arrivals count) features (covariates)} 
\label{tab:imbalance}
\end{table}

% latex table generated in R 3.1.0 by xtable 1.7-4 package
% Fri May 13 15:03:38 2016
\begin{table}[ht]
\centering
\begin{tabular}{lrrrr}
  \hline
 & E(Y1$|$t=1) & E(Y0$|$t=1) & p-value & E(Y0$|$t=0) \\ 
  \hline
qlength & 53.62 & 44.50 & 0.09 & 2.31 \\ 
  A\_JFK & 34.84 & 33.24 & 0.61 & 21.90 \\ 
  windspeed & 12.30 & 12.45 & 0.76 & 10.86 \\ 
  visibility & 7.16 & 7.92 & 0.11 & 9.27 \\ 
  crosswinds & 9.74 & 9.30 & 0.73 & 7.47 \\ 
  vis\_ASPM & 7.72 & 7.72 & 0.87 & 9.26 \\ 
  windspeed\_ASPM & 15.16 & 14.31 & 0.72 & 11.36 \\ 
  ceil\_ASPM & 228.01 & 265.83 & 0.16 & 481.68 \\ 
  crosswind\_ASPM & 8.64 & 8.62 & 0.73 & 6.96 \\ 
   \hline
\end{tabular}
\caption{Simulated counterfactual E(Y0|t=1) and assessment of balance achieved by propensity score weighting the treatment and comparison groups using IPTW} 
\label{tab:balance}
\end{table}


Outcome analysis - Regression without balance 
=======================================================


Outcome analysis - Regression with balance 1
=======================================================
Withouth using queue length, the weights (IPTW) say avg hourly airborne delay increases (5.3 mins)
```{r,echo=FALSE,eval=FALSE}
library(survey)
twang.complete.bd$w<-get.weights(ps.model.noqueue,stop.method="es.mean")
design.jfk<-svydesign(ids=~1, weights=~w, data=twang.complete.bd)
glm1<-svyglm(AirDelay_JFK ~ status, design=design.jfk)
summary(glm1)
```

Outcome analysis - Regression with balance 2
=======================================================
With queue lenght, average airborne delay actually decreases (by 1.4 min) with GDP.
```{r,echo=FALSE,eval=FALSE}
twang.complete.bd$w<-get.weights(ps.model.withqueue,stop.method="es.mean")
design.jfk<-svydesign(ids=~1, weights=~w, data=twang.complete.bd)
glm1<-svyglm(AirDelay_JFK ~ status, design=design.jfk)
summary(glm1)

#std lin reg
glm_standard<-lm(AirDelay_JFK ~ status + qlength + A_JFK + windspeed + visibility + snow + TS + fog + rain + crosswinds + vis_ASPM + temp_ASPM + windspeed_ASPM + windangle_ASPM + ceil_ASPM + crosswind_ASPM, data=twang.complete.bd)